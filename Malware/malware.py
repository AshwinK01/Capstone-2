import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

# Suppress warnings for clean output
import warnings
warnings.filterwarnings('ignore')

# Load dataset
data = pd.read_csv(r"C:\Users\ashwi\Downloads\data_file(1).csv")

# Drop irrelevant columns
data = data.drop(['FileName', 'md5Hash'], axis=1)

# Check if a 'MalwareType' column exists for classification
if 'MalwareType' not in data.columns:
    raise ValueError("The dataset must contain a 'MalwareType' column for this task.")

# Encode categorical features into numeric form
for col in ['Machine', 'DebugSize', 'ResourceSize', 'BitcoinAddresses', 'DllCharacteristics']:
    if col in data.columns:
        data[col] = data[col].astype('category').cat.codes

# Encode the target variable (MalwareType)
label_encoder = LabelEncoder()
data['MalwareType'] = label_encoder.fit_transform(data['MalwareType'])

# Remove duplicate rows
data = data.drop_duplicates()

# Split dataset into features (X) and target (Y)
X = data.drop('MalwareType', axis=1)
Y = data['MalwareType']

# Split into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Train a Random Forest classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, Y_train)

# Predictions
Y_pred = rf.predict(X_test)

# Evaluate the model
print("Classification Report:")
print(classification_report(Y_test, Y_pred, target_names=label_encoder.classes_))

print("Accuracy:", accuracy_score(Y_test, Y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(Y_test, Y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.title("Confusion Matrix")
plt.ylabel("True Label")
plt.xlabel("Predicted Label")
plt.show()

# Cross-validation
cv_scores = cross_val_score(rf, X, Y, cv=5)
print("Cross-Validation Accuracy Scores:", cv_scores)
print("Mean CV Accuracy:", np.mean(cv_scores))
